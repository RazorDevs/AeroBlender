plugins {
    id 'io.github.0ffz.github-packages' version '[1,2)'
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.57'
}

version = "${minecraft_version}-${mod_version}-neoforge"
group = 'teamrazor.aeroblender'

base {
    archivesName = mod_id
}
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    maven githubPackage.invoke("The-Aether-Team/The-Aether")
    maven { url = "https://maven.theillusivec4.top/" }
    maven githubPackage.invoke("The-Aether-Team/Nitrogen")
    maven githubPackage.invoke("The-Aether-Team/Cumulus")
    maven { url = 'https://maven.minecraftforge.net/' }
}

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation ("com.github.glitchfiend:TerraBlender-neoforge:${project.terrablender_version}")

    implementation "top.theillusivec4.curios:curios-neoforge:${project.curios_version}+${project.minecraft_version}"

    implementation ("com.aetherteam.aether:aether:${project.aether_version}")

    implementation ("com.aetherteam.nitrogen:nitrogen_internals:${project.nitrogen_version}")
    implementation ("com.aetherteam.cumulus:cumulus_menus:${project.cumulus_version}")
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}
