
plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version "${neogradle_version}"
    id 'io.github.0ffz.github-packages' version '[1,2)'
}


tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = "${minecraft_version}-${mod_version}-neoforge"
group = mod_group

base {
    archivesName = mod_id
}
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty  'forge.logging.console.level', 'info'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
    }

    data {
        programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    maven githubPackage.invoke("The-Aether-Team/The-Aether")
    maven githubPackage.invoke("The-Aether-Team/Nitrogen")
    maven githubPackage.invoke("The-Aether-Team/Cumulus")
    maven { url = 'https://maven.minecraftforge.net/' }
    maven { url = "https://maven.blamejared.com" }
    maven { url = "https://maven.wispforest.io" }
    maven { url = "https://maven.wispforest.io/releases" }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url 'https://maven.su5ed.dev/releases' }
    maven { url 'https://maven.fabricmc.net' }

    flatDir {
        dir 'libs'
    }
    mavenLocal()
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
    implementation ("com.github.glitchfiend:TerraBlender-neoforge:${project.terrablender_version}")
    implementation ("local:aether:${project.aether_version}")
    implementation ("com.aetherteam.nitrogen:nitrogen_internals:${project.nitrogen_version}")
    implementation ("com.aetherteam.cumulus:cumulus_menus:${project.cumulus_version}")
    implementation "io.wispforest:accessories-neoforge:${project.accessories_version}+${project.minecraft_version}"

    compileOnly "me.shedaniel.cloth:cloth-config-neoforge:${cloth_config_version}"
    compileOnly "dev.architectury:architectury-neoforge:${architectury_version}"
}


tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            mod_id                    : mod_id,
            mod_name                  : mod_name,
            mod_version               : mod_version,
            mod_license               : mod_license,
            mod_url                   : mod_url,
            mod_update                : mod_update,
            mod_tracker               : mod_tracker,
            mod_credits               : mod_credits,
            mod_authors               : mod_authors,
            mod_description           : mod_description,
            minecraft_version         : minecraft_version,
            minecraft_version_range   : minecraft_version_range,
            neo_version               : neo_version,
            neo_version_range         : neo_version_range,
            terrablender_version_range: terrablender_version_range,
            aether_version_range      : aether_version_range,
            loader_version_range      : loader_version_range
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    options.compilerArgs << "-Xmaxerrs" << "9000"
}

tasks.named('jar', Jar).configure {
    archiveClassifier = 'no-embeds'
}

tasks.register('sourceJar', Jar) {
    dependsOn 'classes'
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
